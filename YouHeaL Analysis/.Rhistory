cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palette(n = 5))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palettes(n = 5, name = "GrandBudapest"))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palettes(n = 3, name = "GrandBudapest"))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palettes(n = 5, name = "GrandBudapest"))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palette(n = 5, name = "GrandBudapest"))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = wes_palette(n = 5, name = "Zissou1"))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
dev.copy(png, "YouHeaL_ggtimeline_all.png", width = 2400, height = 1400, res = 300)
ggtimeline_all
dev.off()
# save step by step timelines for presentation
##timeline1
ggtimeline1 <- data_timelineS %>% dplyr::filter(start < as.Date("2018-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline1.png", width = 2400, height = 1400, res = 300)
ggtimeline1
dev.off()
##timeline2
ggtimeline2 <- data_timelineS %>% dplyr::filter(start < as.Date("2019-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline2.png", width = 2400, height = 1400, res = 300)
ggtimeline2
dev.off()
##timeline3
ggtimeline3 <- data_timelineS %>% dplyr::filter(start < as.Date("2019-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline3.png", width = 2400, height = 1400, res = 300)
ggtimeline3
dev.off()
##timeline4
ggtimeline4 <- data_timelineS %>% dplyr::filter(start < as.Date("2020-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline4.png", width = 2400, height = 1400, res = 300)
ggtimeline4
dev.off()
##timeline5
ggtimeline5 <- data_timelineS %>% dplyr::filter(start < as.Date("2020-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline5.png", width = 2400, height = 1400, res = 300)
ggtimeline5
dev.off()
##timeline6
ggtimeline6 <- data_timelineS %>% dplyr::filter(start < as.Date("2021-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline6.png", width = 2400, height = 1400, res = 300)
ggtimeline6
dev.off()
##timeline7
ggtimeline7 <- data_timelineS %>% dplyr::filter(start < as.Date("2021-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline7.png", width = 2400, height = 1400, res = 300)
ggtimeline7
dev.off()
##timeline8
ggtimeline8 <- data_timelineS %>% dplyr::filter(start < as.Date("2022-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline8.png", width = 2400, height = 1400, res = 300)
ggtimeline8
dev.off()
##timeline9
ggtimeline9 <- data_timelineS %>% dplyr::filter(start < as.Date("2022-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline9.png", width = 2400, height = 1400, res = 300)
ggtimeline9
dev.off()
# function that creates timeline data
get_data_timelineS <- function(){
# start dates for different phases of cohort 1
phase1_start <- as.Date("2018-1-1")
phase2.1_start <- phase1_start %m+% months(6)
phase2.2_start <- phase1_start %m+% months(12)
phase3.1_start <- phase2.1_start %m+% months(12)
phase3.2_start <- phase2.2_start %m+% months(12)
# create cohort 1 information
cohort1 <- c(phase1_start, phase2.1_start, phase2.2_start, phase3.1_start, phase3.2_start) %>%
as.data.frame() %>%
cbind(phase = c("1", "2.1", "2.2", "3.1", "3.2")) %>%
dplyr::rename(.data = ., start = .) %>%
mutate(
end = start %m+% months(6),
cohort = 1
) %>% select(cohort, phase, everything())
# create cohort 2 information, all dates start 1 year after cohort 1
cohort2 <- cohort1 %>%
mutate(
start = start %m+% months(12),
end = end %m+% months(12),
cohort = 2
)
# create cohort 3 information, all dates start 2 years after cohort 1
cohort3 <- cohort1 %>%
mutate(
start = start %m+% months(24),
end = end %m+% months(24),
cohort = 3
)
# combine information into a single dataset
rbind(cohort1, cohort2, cohort3) %>%
# format factor levels for phases
mutate(
cohort = factor(cohort, levels = rev(c(1, 2, 3)), labels = rev(c("Cohort 1", "Cohort 2", "Cohort 3"))),
phase = factor(phase,
levels = c("1", "2.1", "2.2", "3.1", "3.2"),
labels = c("Health Training", "Mentor Training", "Mentoring", "Coach Training", "Coaching")
)
)
}
# save timeline data
data_timelineS <- get_data_timelineS()
# make timeline
plot_timelineS <- function(data){
ggtimeline <- data %>% timelineG(start = "start", end = "end", names = "cohort", phase = "phase") +
theme(
legend.position = "top",
legend.text = element_text(size = 10),
legend.title = element_blank()
) +
scale_x_date(date_breaks = "1 year",
labels = date_format("%Y"),
limits = as.Date(c('2018-01-01','2023-01-01'))) +
ylim(c("Cohort 3", "Cohort 2", "Cohort 1")) +
ylab("") +
xlab("\nYear") +
scale_color_manual(values = rev(wes_palette(n = 5, name = "Zissou1")))
}
# save copy of timeline overall
ggtimeline_all <- data_timelineS %>% plot_timelineS()
dev.copy(png, "YouHeaL_ggtimeline_all.png", width = 2400, height = 1400, res = 300)
ggtimeline_all
dev.off()
# save step by step timelines for presentation
##timeline1
ggtimeline1 <- data_timelineS %>% dplyr::filter(start < as.Date("2018-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline1.png", width = 2400, height = 1400, res = 300)
ggtimeline1
dev.off()
##timeline2
ggtimeline2 <- data_timelineS %>% dplyr::filter(start < as.Date("2019-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline2.png", width = 2400, height = 1400, res = 300)
ggtimeline2
dev.off()
##timeline3
ggtimeline3 <- data_timelineS %>% dplyr::filter(start < as.Date("2019-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline3.png", width = 2400, height = 1400, res = 300)
ggtimeline3
dev.off()
##timeline4
ggtimeline4 <- data_timelineS %>% dplyr::filter(start < as.Date("2020-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline4.png", width = 2400, height = 1400, res = 300)
ggtimeline4
dev.off()
##timeline5
ggtimeline5 <- data_timelineS %>% dplyr::filter(start < as.Date("2020-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline5.png", width = 2400, height = 1400, res = 300)
ggtimeline5
dev.off()
##timeline6
ggtimeline6 <- data_timelineS %>% dplyr::filter(start < as.Date("2021-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline6.png", width = 2400, height = 1400, res = 300)
ggtimeline6
dev.off()
##timeline7
ggtimeline7 <- data_timelineS %>% dplyr::filter(start < as.Date("2021-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline7.png", width = 2400, height = 1400, res = 300)
ggtimeline7
dev.off()
##timeline8
ggtimeline8 <- data_timelineS %>% dplyr::filter(start < as.Date("2022-01-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline8.png", width = 2400, height = 1400, res = 300)
ggtimeline8
dev.off()
##timeline9
ggtimeline9 <- data_timelineS %>% dplyr::filter(start < as.Date("2022-06-01")) %>% plot_timelineS()
dev.copy(png, "Timeline/YouHeaL_ggtimeline9.png", width = 2400, height = 1400, res = 300)
ggtimeline9
dev.off()
?grm
install.packages("ltm")
# psychometrics r packages
library(ltm)
?grm
